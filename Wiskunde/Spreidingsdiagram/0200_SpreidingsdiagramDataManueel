{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"images/logosnb.png\" alt=\"Banner\" style=\"width: 1100px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='color: #690027;' markdown=\"1\">\n",
    "    <h1>SPREIDINGSDIAGRAM - MANUEEL DATA INGEVEN</h1> \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-box alert-success\">\n",
    "In deze notebook zal je spreidingsdiagrammen tekenen.<br> Je zal van de module Matplotlib de submodule pyplot gebruiken. De functies van pyplot laten toe om grafieken zoals spreidingsdiagrammen te creëren en personaliseren, zoals bv. een rooster toevoegen, een bepaald deel van een assenstelsel laten zien, kleuren toevoegen … <br>Je zal naast de module Matplotlib een tweede module NumPy nodig hebben. NumPy is ontworpen om met Python wiskundige concepten te gebruiken en wetenschappelijke berekeningen te doen.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-box alert-info\">\n",
    "    Om data van meerdere variabelen te interpreteren, gaat men deze vaak eerst weergeven in een <em>spreidingsdiagram</em> of <em>puntenwolk</em>.\n",
    "    Dit houdt in dat de datapunten in een assenstelsel geplot worden. Daarna bekijkt men bijvoorbeeld de samenhang tussen de variabelen en kan men d.m.v. <em>regressie</em> een best passende grafiek proberen te bepalen bij het spreidingsdiagram.\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Nodige modules importeren"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='color: #690027;' markdown=\"1\">\n",
    "    <h2>1. Spreidingsdiagram</h2> \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "De datapunten van data behorende bij meerdere variabelen kan men tonen in een assenstelsel. Het resultaat van het plotten van deze multivariate gegevens is een *spreidingsdiagram*, ook *puntenwolk* genoemd. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-box alert-info\">\n",
    "De koppels (0,3), (1,24), (2,12), (3,48), (4,6) bijvoorbeeld zijn bivariate gegevens (gegevens met een x-coördinaat en een corresponderende y-coördinaat). Het zijn data behorende bij twee variabelen.<br><br>\n",
    "Om deze punten te kunnen uitzetten in een grafiek, denk je na over de deelproblemen die je moet aanpakken. Je past het concept <em>decompositie</em> van computationeel denken toe: je breekt het probleem op in deelproblemen die bevattelijker zijn. \n",
    "\n",
    "-  Je voert m.b.v. de module NumPy een lijst van de x-coördinaten en een lijst van de y-coördinaten in.\n",
    "-  Je creëert een tekenvenster.\n",
    "-  Je geeft de instructie dat de punten erin geplot moeten worden.\n",
    "-  Tot slot zeg je dat het spreidingsdiagram moet getoond worden.\n",
    " </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='color: #690027;' markdown=\"1\">\n",
    "    <h2>2. Manueel data ingeven en data plotten</h2> \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nu zal je effectief de koppels (0,3), (1,24), (2,12), (3,48), (4,6) uitzetten in een grafiek."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='color: #690027;' markdown=\"1\">\n",
    "    <h3>2.1 Manueel data ingeven</h3> \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Om m.b.v. de module NumPy een lijst van de x-coördinaten en een lijst van de y-coördinaten in te voeren, voer je de volgende code-cel uit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# koppels (O,3), (1,24), (2,12), (3,48), (4,6) ingeven m.b.v. Numpy-lijsten\n",
    "x = np.array([0, 1, 2, 3, 4])            # NumPy-lijst met x-coördinaten          \n",
    "y = np.array([3, 24, 12, 48, 6])         # NumPy-lijst met corresponderende y-coördinaten, volgorde is van belang "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Je kan met de volgende cel bekijken hoe zo'n Numpy-lijst eruitziet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4] [ 3 24 12 48  6]\n"
     ]
    }
   ],
   "source": [
    "print(x, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='color: #690027;' markdown=\"1\">\n",
    "    <h3>2.2 Tekenvenster creëren</h3> \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hoe je een tekenvenster moet creëren, weet je al van in de notebook 'Tekenvenster'. <br> Je moet daarvoor de functies `figure()` en `show()` van de submodule pyplot van Matplotlib gebruiken.   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='color: #690027;' markdown=\"1\">\n",
    "    <h3>2.3 Data plotten</h3> \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Met de functie `scatter()` van pyplot, plot je de punten. <br>\n",
    "Bij het plotten zal Matplotlib de x'n en y's met dezelfde plaats in de lijst aan elkaar koppelen. <br><br>\n",
    "In de volgende code-cel worden de nodige instructies voor deelproblemen samengevoegd. Voer de code-cel uit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD7CAYAAABzGc+QAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAOhUlEQVR4nO3df2ic933A8fdnikrE0uEEK55/NPMGRqwrJA4iZARG1jRzaEvtP5aRQTszAmZjg5QNF7t/bPS/gKGU7Z/NtGEe/bEF6jomtNOM21AKXVolTuoER3NW0iyyiZR0alImNsf97A898uyz5HtOvuee+1rvF4i7e+6R7pMvl3cuz3M6RWYiSSrPL7U9gCRpbQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXqpjo7RcRrwLvAReC9zJyMiNuAfwa2A68Bf5CZ/9XMmJKkTr28Av/dzLwrMyer2weAk5m5AzhZ3ZYkDUjU+UWe6hX4ZGa+ddm2GeD+zDwfEZuBZzJz4lo/Z+PGjbl9+/brm1iS1pnnnnvurcwc79xe6xAKkMC/RkQCf5+Zh4FNmXkeoIr47St9Y0TsA/YB3HHHHUxPT6/pH0CS1quI+MlK2+sG/L7MPFdF+kREvFL3gavYHwaYnJz09/YlqU9qHQPPzHPV5RzwDeAe4M3q0AnV5VxTQ0qSrtY14BHxyxHx/uXrwO8BLwHHgb3VbnuBp5oaUpJ0tTqHUDYB34iI5f2/mpn/EhE/BJ6MiEeB14GHmxtTktSpa8Az88fAnStsfxt4oImhJEnd1T2JKUkcOzXLoakZzi0ssmXDGPt3TbBn59a2x1q3DLikWo6dmuXg0dMsXrgIwOzCIgePngYw4i3xs1Ak1XJoauZSvJctXrjIoamZliaSAZdUy7mFxZ62q3kGXFItWzaM9bRdzTPgkmrZv2uCsdGRK7aNjY6wf9c1PwJJDfIkpqRalk9U+i6U4WHAJdW2Z+dWgz1EPIQiSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYUy4JJUKAMuSYWqHfCIGImIUxHxdHX7tog4ERFnq8tbmxtTktSpl1fgjwFnLrt9ADiZmTuAk9VtSdKA1Ap4RGwDPgZ88bLNu4Ej1fUjwJ7+jiZJupa6r8C/AHwG+MVl2zZl5nmA6vL2lb4xIvZFxHRETM/Pz1/XsJKk/9c14BHxcWAuM59bywNk5uHMnMzMyfHx8bX8CEnSCm6qsc99wCci4qPAzcCvRMSXgTcjYnNmno+IzcBck4NKkq7U9RV4Zh7MzG2ZuR14BPh2Zn4SOA7srXbbCzzV2JSSpKtcz/vAHwcejIizwIPVbUnSgNQ5hHJJZj4DPFNdfxt4oP8jSZLq8DcxJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQXQMeETdHxA8i4sWIeDkiPldtvy0iTkTE2ery1ubHlSQtq/MK/H+AD2fmncBdwEMRcS9wADiZmTuAk9VtSdKAdA14Lvl5dXO0+kpgN3Ck2n4E2NPIhJKkFdU6Bh4RIxHxAjAHnMjMZ4FNmXkeoLq8fZXv3RcR0xExPT8/36+5JWndqxXwzLyYmXcB24B7IuJDdR8gMw9n5mRmTo6Pj691TklSh57ehZKZC8AzwEPAmxGxGaC6nOv7dJKkVdV5F8p4RGyoro8BHwFeAY4De6vd9gJPNTWkJOlqN9XYZzNwJCJGWAr+k5n5dER8H3gyIh4FXgcebnBOSVKHrgHPzB8BO1fY/jbwQBNDSZK68zcxJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySCmXAJalQBlySClXnb2KqIMdOzXJoaoZzC4ts2TDG/l0T7Nm5te2xJDXAgN9Ajp2a5eDR0yxeuAjA7MIiB4+eBjDi0g3IQyg3kENTM5fivWzxwkUOTc20NJGkJhnwG8i5hcWetksqmwG/gWzZMNbTdkllM+A3kP27JhgbHbli29joCPt3TbQ0kaQmeRLzBrJ8otJ3oUjrgwG/wezZudVgS+uEh1AkqVAGXJIKZcAlqVAGXJIKZcAlqVAGXJIKZcAlqVAGXJIKZcAlqVBdAx4RH4iI70TEmYh4OSIeq7bfFhEnIuJsdXlr8+NKkpbVeQX+HvCXmfmbwL3An0XEB4EDwMnM3AGcrG5Lkgaka8Az83xmPl9dfxc4A2wFdgNHqt2OAHuaGlKSdLWejoFHxHZgJ/AssCkzz8NS5IHbV/mefRExHRHT8/Pz1zetJOmS2gGPiFuArwOfzsx36n5fZh7OzMnMnBwfH1/LjJKkFdQKeESMshTvr2Tm0WrzmxGxubp/MzDXzIiSpJXUeRdKAF8CzmTm5y+76ziwt7q+F3iq/+NJklZT5w863Ad8CjgdES9U2z4LPA48GRGPAq8DDzczoiRpJV0DnpnfA2KVux/o7ziSpLr8TUxJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RC3dT2AFKbjp2a5dDUDOcWFtmyYYz9uybYs3Nr22NJtRhwrVvHTs1y8OhpFi9cBGB2YZGDR08DGHEVwUMoWrcOTc1civeyxQsXOTQ109JEUm8MuNatcwuLPW2Xho0B17q1ZcNYT9ulYWPAtW7t3zXB2OjIFdvGRkfYv2uipYmk3ngSU+vW8olK34WiUhlwrWt7dm412CqWh1AkqVBdAx4RT0TEXES8dNm22yLiREScrS5vbXZMSVKnOq/A/wF4qGPbAeBkZu4ATla3JUkD1DXgmfld4Kcdm3cDR6rrR4A9fZ5LktTFWo+Bb8rM8wDV5e2r7RgR+yJiOiKm5+fn1/hwkqROjZ/EzMzDmTmZmZPj4+NNP5wkrRtrDfibEbEZoLqc699IkqQ61hrw48De6vpe4Kn+jCNJqqvO2wi/BnwfmIiINyLiUeBx4MGIOAs8WN2WJA1Q19/EzMw/XOWuB/o8iySpB/4mpiQVyoBLUqEMuCQVyoBLUqEMuCQVyoBLUqEMuCQVyoBLUqEMuCQVyr+JKUkNOnZqtrE/nG3AJakhx07NcvDoaRYvXARgdmGRg0dPA/Ql4h5CkaSGHJqauRTvZYsXLnJoaqYvP9+AS1JDzi0s9rS9VwZckhqyZcNYT9t7ZcAlqSH7d00wNjpyxbax0RH275roy8/3JKYkNWT5RKXvQpGkAu3ZubVvwe7kIRRJKpQBl6RCGXBJKpQBl6RCGXBJKtTQvwulyQ+CkaSSDXXAm/4gGEkq2VAfQmn6g2AkqWRDHfCmPwhGkko21AFv+oNgJKlkQx3wpj8IRpJKNtQnMZv+IBhJKtlQBxya/SAYSSrZUB9CkSStzoBLUqEMuCQVyoBLUqEMuCQVKjJzcA8WMQ/8ZI3fvhF4q4/j9Itz9ca5euNcvRnWueD6Zvu1zBzv3DjQgF+PiJjOzMm25+jkXL1xrt44V2+GdS5oZjYPoUhSoQy4JBWqpIAfbnuAVThXb5yrN87Vm2GdCxqYrZhj4JKkK5X0ClySdBkDLkmFGrqAR8RDETETEa9GxIEV7o+I+Jvq/h9FxN1DMtf9EfGziHih+vqrAcz0RETMRcRLq9zf1lp1m2vga1U97gci4jsRcSYiXo6Ix1bYZ+BrVnOuNp5fN0fEDyLixWquz62wTxvrVWeuVp5j1WOPRMSpiHh6hfv6u16ZOTRfwAjwH8BvAO8DXgQ+2LHPR4FvAQHcCzw7JHPdDzw94PX6HeBu4KVV7h/4WtWca+BrVT3uZuDu6vr7gX8fkudXnbnaeH4FcEt1fRR4Frh3CNarzlytPMeqx/4L4KsrPX6/12vYXoHfA7yamT/OzP8F/gnY3bHPbuAfc8m/ARsiYvMQzDVwmfld4KfX2KWNtaozVysy83xmPl9dfxc4A3R+2PzA16zmXANXrcHPq5uj1Vfnux7aWK86c7UiIrYBHwO+uMoufV2vYQv4VuA/L7v9Blc/kevs08ZcAL9d/W/dtyLitxqeqY421qquVtcqIrYDO1l69Xa5VtfsGnNBC2tWHQ54AZgDTmTmUKxXjbmgnefYF4DPAL9Y5f6+rtewBTxW2Nb5X9Y6+/Rbncd8nqXPK7gT+FvgWMMz1dHGWtXR6lpFxC3A14FPZ+Y7nXev8C0DWbMuc7WyZpl5MTPvArYB90TEhzp2aWW9asw18PWKiI8Dc5n53LV2W2Hbmtdr2AL+BvCBy25vA86tYZ+Bz5WZ7yz/b11mfhMYjYiNDc/VTRtr1VWbaxURoyxF8iuZeXSFXVpZs25ztf38yswF4BngoY67Wn2OrTZXS+t1H/CJiHiNpcOsH46IL3fs09f1GraA/xDYERG/HhHvAx4Bjnfscxz4o+ps7r3AzzLzfNtzRcSvRkRU1+9haW3fbniubtpYq67aWqvqMb8EnMnMz6+y28DXrM5cbaxZRIxHxIbq+hjwEeCVjt3aWK+uc7WxXpl5MDO3ZeZ2lhrx7cz8ZMdufV2vofqjxpn5XkT8OTDF0js/nsjMlyPiT6r7/w74Jktncl8F/hv44yGZ6/eBP42I94BF4JGsTjs3JSK+xtLZ9o0R8Qbw1yyd0GltrWrONfC1qtwHfAo4XR0/BfgscMdls7WxZnXmamPNNgNHImKEpQA+mZlPt/3vY8252nqOXaXJ9fJX6SWpUMN2CEWSVJMBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKtT/Aez+e459Tl/RAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# SPREIDINGSDIAGRAM\n",
    "\n",
    "# koppels (O,3), (1,24), (2,12), (3,48), (4,6) ingeven m.b.v. Numpy-lijsten\n",
    "x = np.array([0, 1, 2, 3, 4])            # NumPy-lijst met x-coördinaten          \n",
    "y = np.array([3, 24, 12, 48, 6])         # NumPy-lijst met corresponderende y-coördinaten, volgorde is van belang \n",
    "\n",
    "plt.figure()                             # creëer figuur\n",
    "\n",
    "plt.scatter(x, y)                        # plot punten\n",
    "      \n",
    "plt.show()                               # toon figuur"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Zo'n grafiek is dus een spreidingsdiagram. <br>\n",
    "Zoals je ziet, gebruikt Python standaard blauwe bolletjes om de punten voor te stellen. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='color: #690027;' markdown=\"1\">\n",
    "    <h2>3. Grafiek opmaken</h2> \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Je kan ervoor zorgen dat de grafiek wat mooier oogt: Je past het bereik van het grafiekvenster aan. Je kan ook de grootte van de grafiek veranderen en een rooster toevoegen.<br>\n",
    "Daartoe moet je instructies toevoegen aan de code: `plt.axis()` voor het bereik, `figsize=(a, b)` voor de grootte, en voor het rooster `plt.grid(True)`.<br><br>\n",
    "Merk op dat de kleinste x-coördinaat 0 is en de grootste x-waarde 4. Voor de y-coördinaten zijn de kleinste en grootste waarde respectievelijk 3 en 48."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# SPREIDINGSDIAGRAM\n",
    "\n",
    "# koppels (O,3), (1,24), (2,12), (3,48), (4,6) ingeven m.b.v. Numpy-lijsten\n",
    "x = np.array([0, 1, 2, 3, 4])            # NumPy-lijst met x-coördinaten          \n",
    "y = np.array([3, 24, 12, 48, 6])         # NumPy-lijst met corresponderende y-coördinaten, volgorde is van belang\n",
    "\n",
    "plt.figure(figsize=(9,5))                       # creëer figuur\n",
    "\n",
    "# bereik assen\n",
    "plt.axis(xmin=-1, xmax=7, ymin=-10, ymax=70)    # bereik x-as en y-as\n",
    "\n",
    "plt.grid(True)                                  # rooster\n",
    "\n",
    "plt.scatter(x, y)                               # plot punten  \n",
    "\n",
    "plt.show()                                      # toon figuur"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "De verdeling op de x-as en y-as kan je ook aanpassen. Omdat die op de x-as goed is, pas je enkel die op de y-as aan: i.p.v. stappen van 10, maak je er stappen van 5 van. Je gebruik daarvoor de functie `yticks()` van pyplot. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# SPREIDINGSDIAGRAM\n",
    "\n",
    "# koppels (O,3), (1,24), (2,12), (3,48), (4,6) ingeven m.b.v. Numpy-lijsten\n",
    "x = np.array([0, 1, 2, 3, 4])            # NumPy-lijst met x-coördinaten          \n",
    "y = np.array([3, 24, 12, 48, 6])         # NumPy-lijst met corresponderende y-coördinaten, volgorde is van belang\n",
    "\n",
    "plt.figure(figsize=(9,5))                        # creëer figuur\n",
    "\n",
    "# bereik en verdeling assen\n",
    "plt.axis(xmin=-1, xmax=7, ymin=-10, ymax=70)     # bereik x-as en y-as\n",
    "plt.yticks(np.arange(-10, 71, step=5))           # verdeling y-as\n",
    "\n",
    "plt.grid(True)                                   # rooster\n",
    " \n",
    "plt.scatter(x, y)                                # plot punten\n",
    "\n",
    "plt.show()                                       # toon figuur"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Opdracht 3.1\n",
    "Plot het spreidingsdiagram voor de volgende punten:\n",
    "(28,33);(40,35);(41,47);(44;35);(45;55);\n",
    "(51,56);(54,50);(57,50);(57,70);(60,65);\n",
    "(62,53);(72,82);(74,80);(90,95);(113,100). <br>\n",
    "Zorg ervoor dat het grafiekvenster voldoende groot is om de spreiding van de punten duidelijk te zien."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Antwoord opdracht 3.1\n",
    "\n",
    "# koppels (O,3), (1,24), (2,12), (3,48), (4,6) ingeven m.b.v. Numpy arrays\n",
    "x = np.array([28, 40, 41, 44, 45, 51, 54, 57, 57, 60, 62, 72, 74, 90, 113])     # NumPy-lijst met x-coördinaten          \n",
    "y = np.array([33, 35, 47, 35, 55, 56, 50, 50, 70, 65, 53, 82, 80, 95, 100])     # NumPy-lijst met corresponderende y-coördinaten, volgorde is van belang\n",
    "\n",
    "plt.figure(figsize=(9,5))                          # creëer figuur\n",
    "\n",
    "# bereik en verdeling assen\n",
    "plt.axis(xmin=-10, xmax=130, ymin=-10, ymax=110)  \n",
    "plt.xticks(np.arange(-10, 131, step=10))            # verdeling x-as\n",
    "plt.yticks(np.arange(-10, 111, step=5))            # verdeling y-as\n",
    "\n",
    "plt.grid(True)                                     # rooster\n",
    "\n",
    "plt.scatter(x, y)                                  # plot punten \n",
    "\n",
    "plt.show()                                         # toon figuur"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Het eerste deel is waar de variabelen die we willen plotten benoemd worden (bv. x en y)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-warning\"> \n",
    "Het tweede deel is waar je de opmaak van de grafiek terugvindt zoals kleuren tekens. De opmaak van grafieken behandelen we in de notebook <em>Opmaak van Grafieken</em>.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"images/cclic.png\" alt=\"Banner\" align=\"left\" style=\"width:100px;\"/><br><br>\n",
    "Notebook Python in wiskunde, zie <a href=\"http://www.aiopschool.be\">AI Op School</a>, van F. wyffels, B. Van de Velde & N. Gesquière is in licentie gegeven volgens een <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Naamsvermelding-NietCommercieel-GelijkDelen 4.0 Internationaal-licentie</a>. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
